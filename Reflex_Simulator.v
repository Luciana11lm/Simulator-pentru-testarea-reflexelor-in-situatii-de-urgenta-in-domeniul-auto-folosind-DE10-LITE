
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Reflex_Simulator(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output	       [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output    		 [7:0]		HEX4,
	output    		 [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N
);


//=======================================================
//									 LOCAL PARAMETERS
//=======================================================
localparam ACK_DATA_WIDTH = 'd8  ;
localparam REQ_DATA_WIDTH = 'd16 ;
localparam CNT_WIDTH      = 'd4  ;
localparam DATA_WIDTH     = 'd8  ;  

//=======================================================
// 									 REG/WIRE declarations
//=======================================================

wire                               rst_delayed_n ;
wire                               clk_25MHz     ;
wire                               spi_clk       ;
wire                               spi_clk_out   ;
wire                               host_req      ;
wire        [REQ_DATA_WIDTH  -1:0] host_req_data ;
wire                               host_ack      ;
wire        [ACK_DATA_WIDTH  -1:0] host_ack_data ;
wire        [ACK_DATA_WIDTH  -1:0] datax0        ;
wire        [ACK_DATA_WIDTH  -1:0] datax1        ;
wire        [ACK_DATA_WIDTH  -1:0] datay0        ;
wire        [ACK_DATA_WIDTH  -1:0] datay1        ;
wire                               start_display ;
wire signed [10              -1:0] x_acc         ;     
wire signed [10              -1:0] y_acc         ;  
wire        [4               -1:0] score         ;   
wire                               clk_slow      ;
wire                               over          ; 



//=======================================================
//  								 Structural coding
//=======================================================

assign HEX5 = 8'b10010010;
assign HEX4 = 8'b11000110;
assign HEX3 = 8'b11000000;
assign HEX2 = 8'b10001000;

reset_delay i_reset_delay(
.clk            (MAX10_CLK1_50 ),
.rst_n          (KEY[0]        ),
.rst_delayed_n  (rst_delayed_n )
);

pll_spi i_pll_spi(
.areset			    (~KEY[0]       ),
.inclk0			    (MAX10_CLK1_50 ),
.c0             (spi_clk       ),
.c1             (spi_clk_out   ),
.locked         (              )
);
 
spi_sequencer #(
.ACK_DATA_WIDTH (ACK_DATA_WIDTH),
.REQ_DATA_WIDTH (REQ_DATA_WIDTH),
.DATA_WIDTH     (DATA_WIDTH    )
)i_spi_sequencer(
.clk            (spi_clk       ),
.rst_n          (rst_delayed_n ),
.host_req       (host_req      ),
.host_req_data  (host_req_data ),
.host_ack       (host_ack      ),
.host_ack_data  (host_ack_data ),
.datax0         (datax0        ),
.datax1         (datax1        ),
.datay0         (datay0        ),
.datay1         (datay1   		 ),
.start_display   (start_display  ) 
);

spi_phy #(
.ACK_DATA_WIDTH (ACK_DATA_WIDTH),
.REQ_DATA_WIDTH (REQ_DATA_WIDTH),
.CNT_WIDTH      (CNT_WIDTH     )
)i_spi_phy(
.clk            (spi_clk       ),
.spi_clk        (spi_clk_out   ),
.rst_n          (rst_delayed_n ),
.host_req       (host_req      ),
.host_req_data  (host_req_data ),
.host_ack       (host_ack      ),
.host_ack_data  (host_ack_data ),
.spi_sclk       (GSENSOR_SCLK  ),
.spi_cs_n       (GSENSOR_CS_N  ),
.spi_sdo        (GSENSOR_SDO   ),
.spi_sdio       (GSENSOR_SDI   )
);

diaplay_data i_diaplay_data(
.clk           (spi_clk                             ),
.rst_n         (rst_delayed_n                       ),
.datax0        (datax0                              ),
.datax1        (datax1                              ),
.datay0        (datay0                              ),
.datay1        (datay1                              ),
.start_display (start_display                       ),
.led           (LEDR                                ),
.display       (), //{HEX5, HEX4, HEX3, HEX2, HEX1, HEX0}
.x_acc         (x_acc                               ),
.y_acc         (y_acc                               )
);

street_screen i_street_screen(
.clk           (clk_25MHz     ), 
.clk_slow      (clk_slow       ),
.rst_n         (rst_delayed_n ), 
.x_acc         (x_acc         ),
.y_acc         (y_acc         ),
.o_hsync       (VGA_HS        ), 
.o_vsync       (VGA_VS        ), 
.o_red         (VGA_R         ),
.o_blue        (VGA_B         ),
.o_green       (VGA_G         ),
.over          (over          ),
.score         (score         )
);

display_score #(
.NO_SEGMENTS   (             )
)i_display_score(
.clk           (clk_25MHz      ), 
.rst_n         (rst_delayed_n),
.score         (score				 ),
.over          (over 				 ), 
.display0      (HEX0 				 ),
.display1      (HEX1 				 )
);

clk_devider_25MHZ i_clk_devider_25MHZ(
.clk       (MAX10_CLK1_50),
.rst_n     (KEY[0]       ),
.clk_25MHz (clk_25MHz    ),
.clk_slow  (clk_slow     )
);

endmodule // Reflex_Simulator
